# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lm--W4lCOn_eV0uYoHXdOvoOHP45KBa-
"""



# Commented out IPython magic to ensure Python compatibility.
# Import necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from utils import *
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.callbacks import EarlyStopping, LambdaCallback

# %matplotlib inline
tf.get_logger().setLevel('ERROR')

print('Libraries imported.')

# Load and preprocess the data
df = pd.read_csv('data.csv', names=column_names)
df = df.iloc[:, 1:]
df_norm = (df - df.mean()) / df.std()

y_mean = df['price'].mean()
y_std = df['price'].std()
def convert_label_value(pred):
    return int(pred * y_std + y_mean)

# Feature and target selection
x = df_norm.iloc[:, :6]
y = df_norm.iloc[:, -1]

x_arr = x.values
y_arr = y.values

x_train, x_test, y_train, y_test = train_test_split(x_arr, y_arr, test_size=0.05, random_state=0)

# Model definition
def get_model():
    model = Sequential([
        Dense(10, input_shape=(6,), activation='relu'),
        Dense(20, activation='relu'),
        Dense(5, activation='relu'),
        Dense(1)
    ])
    model.compile(loss='mse', optimizer='adam')
    return model

# Model training
es_cb = EarlyStopping(monitor='val_loss', patience=5)

model = get_model()
preds_on_untrained = model.predict(x_test)

history = model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=100, callbacks=[es_cb])

plot_loss(history)

# Compare predictions
preds_on_trained = model.predict(x_test)

price_untrained = [convert_label_value(y) for y in preds_on_untrained]
price_trained = [convert_label_value(y) for y in preds_on_trained]
price_test = [convert_label_value(y) for y in y_test]

compare_predictions(price_untrained, price_trained, price_test)